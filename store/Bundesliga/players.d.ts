// Generated by https://jsonformatter.org/json-to-typescript for Bundesliga api
export default interface Bundesliga {
  match_day_uid: string;
  agent: Agent;
  offerings: Offerings;
  transaction: Transaction;
  squad: Squad;
  checkups: Checkups;
  filter_data: FilterData;
  opening_hour: OpeningHour;
}

export interface Agent {
  budget: number;
  transfers_left: number;
  bonus_transfers_left: number;
  first_transaction: boolean;
  pending: boolean;
}

export interface Checkups {
  items: CheckupsItem[];
}

export interface CheckupsItem {
  key: string;
  args: ItemArgs;
}

export interface ItemArgs {
  position: Position;
  current: number;
  minimal: number;
  maximum: number;
}

export enum Position {
  All = "all",
  Att = "att",
  Def = "def",
  Gk = "gk",
  Mid = "mid",
}

export interface FilterData {
  selectable_teams: SelectableTeam[];
  selectable_positions: Position[];
  selectable_statistics: string[];
  min_price: number;
  max_price: number;
}

export interface SelectableTeam {
  uid: string;
  team_code: string;
  eliminated: boolean;
  image_urls: ImageUrls;
}

export interface ImageUrls {
  default: Default;
}

export interface Default {
  default: string;
  "1x": string;
  "2x": string;
  "3x": string;
}

export interface Offerings {
  offset: number;
  per_page: number;
  total_offerings: number;
  sorted_by: string;
  items: OfferingsItem[];
}

export interface OfferingsItem {
  buyable: boolean;
  active: boolean;
  interactive: boolean;
  denials_for_buying: string[];
  transfer_value: number;
  favorite: boolean;
  player: Player;
  attendance: PurpleAttendance;
}

export interface PurpleAttendance {
  forecast: Forecast;
  details: PurpleDetail[];
}

export interface PurpleDetail {
  key: Key;
  args: PurpleArgs;
}

export interface PurpleArgs {
  state: State;
  description?: string;
}

export enum State {
  Bench = "bench",
  Definite = "definite",
  NotInSquad = "not_in_squad",
  Starter = "starter",
}

export enum Key {
  InitialStateInSquad = "initial_state_in_squad",
  Injured = "injured",
}

export enum Forecast {
  Attending = "attending",
  Missing = "missing",
  Unknown = "unknown",
}

export interface Player {
  uid: string;
  external_uid: string;
  transfer_value: number;
  statistics: Statistics;
  statistics_path: string;
  image_urls: Default;
  nickname: string;
  positions: Position[];
  is_locked: boolean;
  is_eliminated: boolean;
  is_available: boolean;
  match_starts_in: number;
  total_scores: TotalScores;
  team: Team;
  next_opponent: NextOpponent;
  on_sale?: OnSale;
}

export interface NextOpponent {
  team_code: string;
  match_venue: MatchVenue;
}

export enum MatchVenue {
  Away = "away",
  Home = "home",
}

export interface OnSale {
  suggested_transfer_value: number;
}

export interface Statistics {
  total_points: number;
  average_points: number;
  best_value_rank: number;
  form: number;
  popularity: number;
  last_match_points: number;
  last_season_points: number;
}

export interface Team {
  uid: string;
  team_code: string;
  image_urls: Default;
}

export interface TotalScores {
  att: number;
  def: number;
  mid: number;
  gk: number;
}

export interface OpeningHour {
  opened: boolean;
  countdown: number;
}

export interface Squad {
  items: SquadItem[];
}

export interface SquadItem {
  sellable: boolean;
  denials_for_selling: unknown[];
  transfer_value: number;
  marked_to_buy: boolean;
  marked_to_sell: boolean;
  is_used: boolean;
  interactive: boolean;
  player: Player;
  attendance: FluffyAttendance;
}

export interface FluffyAttendance {
  forecast: Forecast;
  details: FluffyDetail[];
}

export interface FluffyDetail {
  key: Key;
  args: FluffyArgs;
}

export interface FluffyArgs {
  state: State;
}

export interface Transaction {
  pending: boolean;
  first_transaction: boolean;
  commit_denials: unknown[];
}
